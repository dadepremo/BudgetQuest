package budgetquest.service;

import budgetquest.dao.UserDao.UserDao;
import budgetquest.dao.UserDao.UserDaoImpl;
import budgetquest.model.Liability;
import budgetquest.model.User;
import budgetquest.utils.MyUtils;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.pdf.draw.LineSeparator;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;

public class LiabilityPdfGenerator {

    private static final Logger logger = LogManager.getLogger(LiabilityPdfGenerator.class);

    private final UserDao userDao = new UserDaoImpl();

    public void generateLiabilityPdf(Liability liability, String filePath) {
        try {
            Document document = new Document(PageSize.A4, 50, 50, 70, 50);
            PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();

            // Logo
            try {
                Image logo = Image.getInstance(getClass().getResource("/img/logo.png"));
                logo.scaleAbsolute(60, 60);
                logo.setAlignment(Image.ALIGN_RIGHT);
                document.add(logo);
            } catch (Exception ignored) {}

            // Title
            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 22, BaseColor.DARK_GRAY);
            Paragraph title = new Paragraph("Liability Report", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            title.setSpacingAfter(25);
            document.add(title);

            // Section 1: Liability Details
            addSectionTitle(document, "Contract Details");
            PdfPTable liabilityTable = createTable();
            addLiabilityRows(liabilityTable, liability);
            document.add(liabilityTable);

            // Section 2: Creditor Info
            addSectionTitle(document, "Creditor Information");
            PdfPTable creditorTable = createTable();
            addCreditorRows(creditorTable, liability);
            document.add(creditorTable);

            // Footer
            Paragraph footer = new Paragraph("Generated by BudgetQuest • " + java.time.LocalDate.now(),
                    FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 10, BaseColor.GRAY));
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setSpacingBefore(40f);
            document.add(footer);

            document.close();
            logger.info("PDF created at: " + filePath);
        } catch (Exception e) {
            logger.error("Failed to generate PDF", e);
        }
    }


    private void addSectionTitle(Document doc, String titleText) throws DocumentException {
        Font sectionFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14, BaseColor.BLACK);
        Paragraph section = new Paragraph(titleText, sectionFont);
        section.setSpacingBefore(20f);
        section.setSpacingAfter(10f);
        doc.add(section);

        LineSeparator line = new LineSeparator();
        line.setLineColor(BaseColor.LIGHT_GRAY);
        doc.add(line);
    }

    private PdfPTable createTable() throws DocumentException {
        PdfPTable table = new PdfPTable(2);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{1.5f, 3.5f});
        table.setSpacingBefore(10f);
        return table;
    }

    private void addLiabilityRows(PdfPTable table, Liability l) {

        User currentUser = userDao.getUserById(l.getUserId()).get();

        BaseColor bg = new BaseColor(245, 245, 245);
        Font labelFont = FontFactory.getFont(FontFactory.HELVETICA, 11, BaseColor.GRAY);
        Font valueFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, BaseColor.BLACK);

        addStyledRow(table, "Name", l.getName(), labelFont, valueFont, bg);
        addStyledRow(table, "Type", l.getType(), labelFont, valueFont, null);
        addStyledRow(table, "Category", l.getCategory(), labelFont, valueFont, bg);
        addStyledRow(table, "Status", l.getLiabilityStatus(), labelFont, valueFont, null);
        addStyledRow(table, "Amount", MyUtils.formatCurrency(l.getAmount(), currentUser.getCurrencySymbol()), labelFont, valueFont, bg);
        addStyledRow(table, "Remaining", MyUtils.formatCurrency(l.getAmountRemaining(), currentUser.getCurrencySymbol()), labelFont, valueFont, null);
        addStyledRow(table, "Interest Rate", formatPercent(l.getInterestRate()), labelFont, valueFont, bg);
        addStyledRow(table, "Start Date", formatDate(l.getStartDate()), labelFont, valueFont, null);
        addStyledRow(table, "Due Date", formatDate(l.getDueDate()), labelFont, valueFont, bg);
        addStyledRow(table, "Monthly Payment", MyUtils.formatCurrency(l.getMonthlyPayment(), currentUser.getCurrencySymbol()), labelFont, valueFont, null);
        addStyledRow(table, "Minimum Payment", MyUtils.formatCurrency(l.getMinimumPayment(), currentUser.getCurrencySymbol()), labelFont, valueFont, bg);
        addStyledRow(table, "Next Payment Due", formatDate(l.getNextPaymentDue()), labelFont, valueFont, null);
        addStyledRow(table, "Last Payment", formatDate(l.getLastPaymentDate()), labelFont, valueFont, bg);
        addStyledRow(table, "Total Paid", MyUtils.formatCurrency(l.getTotalPaid(), currentUser.getCurrencySymbol()), labelFont, valueFont, null);
        addStyledRow(table, "Reminder", l.isReminderEnabled() ? "Yes" : "No", labelFont, valueFont, bg);
        addStyledRow(table, "Notes", l.getNotes(), labelFont, valueFont, null);
    }

    private void addCreditorRows(PdfPTable table, Liability l) {
        BaseColor bg = new BaseColor(245, 245, 245);
        Font labelFont = FontFactory.getFont(FontFactory.HELVETICA, 11, BaseColor.GRAY);
        Font valueFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, BaseColor.BLACK);

        addStyledRow(table, "Creditor Name", l.getCreditorName(), labelFont, valueFont, bg);
        addStyledRow(table, "Creditor Contact", l.getCreditorContact(), labelFont, valueFont, null);
    }


    private void addStyledRow(PdfPTable table, String label, String value, Font labelFont, Font valueFont, BaseColor bg) {
        PdfPCell labelCell = new PdfPCell(new Phrase(label, labelFont));
        PdfPCell valueCell = new PdfPCell(new Phrase(value != null ? value : "—", valueFont));
        if (bg != null) {
            labelCell.setBackgroundColor(bg);
            valueCell.setBackgroundColor(bg);
        }
        labelCell.setPadding(6);
        valueCell.setPadding(6);
        labelCell.setBorder(Rectangle.NO_BORDER);
        valueCell.setBorder(Rectangle.NO_BORDER);
        table.addCell(labelCell);
        table.addCell(valueCell);
    }

    private String formatPercent(BigDecimal value) {
        return value != null ? value.setScale(2, BigDecimal.ROUND_HALF_UP) + "%" : "—";
    }

    private String formatDate(java.time.LocalDate date) {
        return date != null ? date.format(DateTimeFormatter.ofPattern("MMM dd, yyyy")) : "—";
    }
}
