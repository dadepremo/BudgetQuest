

Activities that give xp:
- Adding an asset 1000 xp





1. Quests / Challenges
Daily, weekly, or monthly goals (e.g. “Spend less than €100 this week” or “Save €500 this month”).

Reward users with XP or badges.

2. Achievements / Badges
One-time unlockables for milestones: “First Income”, “No Spend Week”, “Reached €10k Net Worth”, etc.

3. Streaks
Track consecutive days of logging expenses or updating balances.

Reset streaks if the user skips a day (optional, or with a grace mechanic).

4. Leveling System
XP for logging transactions, completing goals, reaching milestones.

Level up with rewards (new features, cosmetics, or just status).

5. Leaderboard (optional)
For competitive users (opt-in), show rankings based on savings %, goals completed, XP, etc.

6. Budgeting by Category
Set monthly/weekly budgets per category (e.g., €300 for food).

Visual indicators when nearing or exceeding limits.

7. Recurring Transactions
Monthly income (salary), subscriptions, rent, etc.

Auto-insert or suggest on recurring dates.

8. Reports & Trends
Monthly income vs expenses.

Category breakdowns, historical net worth.

Graphs of spending/saving trends.

9. Goals Tracking
Save for a vacation, emergency fund, etc.

Allow partial progress, deadlines, and visual progress bars.

10. Currency Conversion
Useful if users track income/expenses in multiple currencies.

Optionally fetch rates from an API (like ECB, OpenExchangeRates).

11. Dark Mode / Themes
Reward themes for leveling up.

12. Reminders / Notifications
Gentle nudges to add expenses, complete goals, etc.

13. Manual and Automatic Backups
Export/import data as JSON or CSV.

14. Multi-Device Sync
Optional cloud sync or export to cloud storage.

Check achievements:
On expense/income creation
On login (for streaks)
On XP/level gain
On net worth update



UNLOCK ALL ACHIEVEMENTS


INSERT INTO user_achievements (user_id, achievement_id, unlocked_at)
SELECT 12, a.id, NOW()
FROM achievements a
WHERE NOT EXISTS (
    SELECT 1
    FROM user_achievements ua
    WHERE ua.user_id = 123 AND ua.achievement_id = a.id
);


import javafx.animation.PauseTransition;
import javafx.util.Duration;
import javafx.scene.control.TextField;

TextField searchField = new TextField();

PauseTransition pause = new PauseTransition(Duration.millis(300)); // debounce 300ms

searchField.textProperty().addListener((obs, oldText, newText) -> {
    pause.stop(); // reset debounce timer
    pause.setOnFinished(event -> {
        // Call your search method here with newText
        performSearch(newText);
    });
    pause.playFromStart();
});

private void performSearch(String query) {
    // Query your database or in-memory data
    // For example:
    List<Result> results = myDao.searchItems(query);
    // Update UI with results
    updateSearchResults(results);
}


Platform.runLater(() -> {
            Node line = series.getNode().lookup(".chart-series-line");
            if (line != null) {
                line.setStyle("-fx-stroke: green;");
            }

            for (XYChart.Data<String, Number> data : series.getData()) {
                Node node = data.getNode();
                if (node != null) {
                    node.setStyle("-fx-background-color: green, white;");
                }
            }
        });